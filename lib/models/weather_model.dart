///
/// Code generated by jsonToDartModel https://ashamp.github.io/jsonToDartModel/
///
class WeatherModelCurrentConditions {
/*
{
  "datetime": "23:20:00",
  "datetimeEpoch": 1691792400,
  "temp": 65.8,
  "feelslike": 65.8,
  "humidity": 75.7,
  "dew": 57.9,
  "precip": 0,
  "precipprob": 0,
  "snow": 0,
  "snowdepth": 0,
  "preciptype": null,
  "windgust": 0.9,
  "windspeed": 2,
  "winddir": 167,
  "pressure": 1017,
  "visibility": 6.2,
  "cloudcover": 87,
  "solarradiation": 0,
  "solarenergy": 0,
  "uvindex": 0,
  "conditions": "Partially cloudy",
  "icon": "partly-cloudy-night",
  "stations": [
    "D5621"
  ],
  "source": "obs",
  "sunrise": "05:39:07",
  "sunriseEpoch": 1691728747,
  "sunset": "20:31:27",
  "sunsetEpoch": 1691782287,
  "moonphase": 0.83
} 
*/

  String? datetime;
  int? datetimeEpoch;
  double? temp;
  double? feelslike;
  double? humidity;
  double? dew;
  int? precip;
  int? precipprob;
  int? snow;
  int? snowdepth;
  String? preciptype;
  double? windgust;
  int? windspeed;
  int? winddir;
  int? pressure;
  double? visibility;
  int? cloudcover;
  int? solarradiation;
  int? solarenergy;
  int? uvindex;
  String? conditions;
  String? icon;
  List<String?>? stations;
  String? source;
  String? sunrise;
  int? sunriseEpoch;
  String? sunset;
  int? sunsetEpoch;
  double? moonphase;

  WeatherModelCurrentConditions({
    this.datetime,
    this.datetimeEpoch,
    this.temp,
    this.feelslike,
    this.humidity,
    this.dew,
    this.precip,
    this.precipprob,
    this.snow,
    this.snowdepth,
    this.preciptype,
    this.windgust,
    this.windspeed,
    this.winddir,
    this.pressure,
    this.visibility,
    this.cloudcover,
    this.solarradiation,
    this.solarenergy,
    this.uvindex,
    this.conditions,
    this.icon,
    this.stations,
    this.source,
    this.sunrise,
    this.sunriseEpoch,
    this.sunset,
    this.sunsetEpoch,
    this.moonphase,
  });
  WeatherModelCurrentConditions.fromJson(Map<String, dynamic> json) {
    datetime = json['datetime']?.toString();
    datetimeEpoch = json['datetimeEpoch']?.toInt();
    temp = json['temp']?.toDouble();
    feelslike = json['feelslike']?.toDouble();
    humidity = json['humidity']?.toDouble();
    dew = json['dew']?.toDouble();
    precip = json['precip']?.toInt();
    precipprob = json['precipprob']?.toInt();
    snow = json['snow']?.toInt();
    snowdepth = json['snowdepth']?.toInt();
    preciptype = json['preciptype']?.toString();
    windgust = json['windgust']?.toDouble();
    windspeed = json['windspeed']?.toInt();
    winddir = json['winddir']?.toInt();
    pressure = json['pressure']?.toInt();
    visibility = json['visibility']?.toDouble();
    cloudcover = json['cloudcover']?.toInt();
    solarradiation = json['solarradiation']?.toInt();
    solarenergy = json['solarenergy']?.toInt();
    uvindex = json['uvindex']?.toInt();
    conditions = json['conditions']?.toString();
    icon = json['icon']?.toString();
  if (json['stations'] != null) {
  final v = json['stations'];
  final arr0 = <String>[];
  v.forEach((v) {
  arr0.add(v.toString());
  });
    stations = arr0;
    }
    source = json['source']?.toString();
    sunrise = json['sunrise']?.toString();
    sunriseEpoch = json['sunriseEpoch']?.toInt();
    sunset = json['sunset']?.toString();
    sunsetEpoch = json['sunsetEpoch']?.toInt();
    moonphase = json['moonphase']?.toDouble();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['datetime'] = datetime;
    data['datetimeEpoch'] = datetimeEpoch;
    data['temp'] = temp;
    data['feelslike'] = feelslike;
    data['humidity'] = humidity;
    data['dew'] = dew;
    data['precip'] = precip;
    data['precipprob'] = precipprob;
    data['snow'] = snow;
    data['snowdepth'] = snowdepth;
    data['preciptype'] = preciptype;
    data['windgust'] = windgust;
    data['windspeed'] = windspeed;
    data['winddir'] = winddir;
    data['pressure'] = pressure;
    data['visibility'] = visibility;
    data['cloudcover'] = cloudcover;
    data['solarradiation'] = solarradiation;
    data['solarenergy'] = solarenergy;
    data['uvindex'] = uvindex;
    data['conditions'] = conditions;
    data['icon'] = icon;
    if (stations != null) {
      final v = stations;
      final arr0 = [];
  v!.forEach((v) {
  arr0.add(v);
  });
      data['stations'] = arr0;
    }
    data['source'] = source;
    data['sunrise'] = sunrise;
    data['sunriseEpoch'] = sunriseEpoch;
    data['sunset'] = sunset;
    data['sunsetEpoch'] = sunsetEpoch;
    data['moonphase'] = moonphase;
    return data;
  }
}

class WeatherModelStationsF6665 {
/*
{
  "distance": 14583,
  "latitude": 51.437,
  "longitude": 0.051,
  "useCount": 0,
  "id": "F6665",
  "name": "FW6665 Mottingham UK",
  "quality": 0,
  "contribution": 0
} 
*/

  int? distance;
  double? latitude;
  double? longitude;
  int? useCount;
  String? id;
  String? name;
  int? quality;
  int? contribution;

  WeatherModelStationsF6665({
    this.distance,
    this.latitude,
    this.longitude,
    this.useCount,
    this.id,
    this.name,
    this.quality,
    this.contribution,
  });
  WeatherModelStationsF6665.fromJson(Map<String, dynamic> json) {
    distance = json['distance']?.toInt();
    latitude = json['latitude']?.toDouble();
    longitude = json['longitude']?.toDouble();
    useCount = json['useCount']?.toInt();
    id = json['id']?.toString();
    name = json['name']?.toString();
    quality = json['quality']?.toInt();
    contribution = json['contribution']?.toInt();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['distance'] = distance;
    data['latitude'] = latitude;
    data['longitude'] = longitude;
    data['useCount'] = useCount;
    data['id'] = id;
    data['name'] = name;
    data['quality'] = quality;
    data['contribution'] = contribution;
    return data;
  }
}

class WeatherModelStationsD5621 {
/*
{
  "distance": 11192,
  "latitude": 51.535,
  "longitude": 0.028,
  "useCount": 0,
  "id": "D5621",
  "name": "DW5621 Upton Park UK",
  "quality": 0,
  "contribution": 0
} 
*/

  int? distance;
  double? latitude;
  double? longitude;
  int? useCount;
  String? id;
  String? name;
  int? quality;
  int? contribution;

  WeatherModelStationsD5621({
    this.distance,
    this.latitude,
    this.longitude,
    this.useCount,
    this.id,
    this.name,
    this.quality,
    this.contribution,
  });
  WeatherModelStationsD5621.fromJson(Map<String, dynamic> json) {
    distance = json['distance']?.toInt();
    latitude = json['latitude']?.toDouble();
    longitude = json['longitude']?.toDouble();
    useCount = json['useCount']?.toInt();
    id = json['id']?.toString();
    name = json['name']?.toString();
    quality = json['quality']?.toInt();
    contribution = json['contribution']?.toInt();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['distance'] = distance;
    data['latitude'] = latitude;
    data['longitude'] = longitude;
    data['useCount'] = useCount;
    data['id'] = id;
    data['name'] = name;
    data['quality'] = quality;
    data['contribution'] = contribution;
    return data;
  }
}

class WeatherModelStationsEGLL {
/*
{
  "distance": 22564,
  "latitude": 51.48,
  "longitude": -0.45,
  "useCount": 0,
  "id": "EGLL",
  "name": "EGLL",
  "quality": 50,
  "contribution": 0
} 
*/

  int? distance;
  double? latitude;
  double? longitude;
  int? useCount;
  String? id;
  String? name;
  int? quality;
  int? contribution;

  WeatherModelStationsEGLL({
    this.distance,
    this.latitude,
    this.longitude,
    this.useCount,
    this.id,
    this.name,
    this.quality,
    this.contribution,
  });
  WeatherModelStationsEGLL.fromJson(Map<String, dynamic> json) {
    distance = json['distance']?.toInt();
    latitude = json['latitude']?.toDouble();
    longitude = json['longitude']?.toDouble();
    useCount = json['useCount']?.toInt();
    id = json['id']?.toString();
    name = json['name']?.toString();
    quality = json['quality']?.toInt();
    contribution = json['contribution']?.toInt();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['distance'] = distance;
    data['latitude'] = latitude;
    data['longitude'] = longitude;
    data['useCount'] = useCount;
    data['id'] = id;
    data['name'] = name;
    data['quality'] = quality;
    data['contribution'] = contribution;
    return data;
  }
}

class WeatherModelStationsEGLC {
/*
{
  "distance": 12300,
  "latitude": 51.5,
  "longitude": 0.05,
  "useCount": 0,
  "id": "EGLC",
  "name": "EGLC",
  "quality": 50,
  "contribution": 0
} 
*/

  int? distance;
  double? latitude;
  double? longitude;
  int? useCount;
  String? id;
  String? name;
  int? quality;
  int? contribution;

  WeatherModelStationsEGLC({
    this.distance,
    this.latitude,
    this.longitude,
    this.useCount,
    this.id,
    this.name,
    this.quality,
    this.contribution,
  });
  WeatherModelStationsEGLC.fromJson(Map<String, dynamic> json) {
    distance = json['distance']?.toInt();
    latitude = json['latitude']?.toDouble();
    longitude = json['longitude']?.toDouble();
    useCount = json['useCount']?.toInt();
    id = json['id']?.toString();
    name = json['name']?.toString();
    quality = json['quality']?.toInt();
    contribution = json['contribution']?.toInt();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['distance'] = distance;
    data['latitude'] = latitude;
    data['longitude'] = longitude;
    data['useCount'] = useCount;
    data['id'] = id;
    data['name'] = name;
    data['quality'] = quality;
    data['contribution'] = contribution;
    return data;
  }
}

class WeatherModelStationsEGWU {
/*
{
  "distance": 20850,
  "latitude": 51.55,
  "longitude": -0.42,
  "useCount": 0,
  "id": "EGWU",
  "name": "EGWU",
  "quality": 50,
  "contribution": 0
} 
*/

  int? distance;
  double? latitude;
  double? longitude;
  int? useCount;
  String? id;
  String? name;
  int? quality;
  int? contribution;

  WeatherModelStationsEGWU({
    this.distance,
    this.latitude,
    this.longitude,
    this.useCount,
    this.id,
    this.name,
    this.quality,
    this.contribution,
  });
  WeatherModelStationsEGWU.fromJson(Map<String, dynamic> json) {
    distance = json['distance']?.toInt();
    latitude = json['latitude']?.toDouble();
    longitude = json['longitude']?.toDouble();
    useCount = json['useCount']?.toInt();
    id = json['id']?.toString();
    name = json['name']?.toString();
    quality = json['quality']?.toInt();
    contribution = json['contribution']?.toInt();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['distance'] = distance;
    data['latitude'] = latitude;
    data['longitude'] = longitude;
    data['useCount'] = useCount;
    data['id'] = id;
    data['name'] = name;
    data['quality'] = quality;
    data['contribution'] = contribution;
    return data;
  }
}

class WeatherModelStations {
/*
{
  "EGWU": {
    "distance": 20850,
    "latitude": 51.55,
    "longitude": -0.42,
    "useCount": 0,
    "id": "EGWU",
    "name": "EGWU",
    "quality": 50,
    "contribution": 0
  },
  "EGLC": {
    "distance": 12300,
    "latitude": 51.5,
    "longitude": 0.05,
    "useCount": 0,
    "id": "EGLC",
    "name": "EGLC",
    "quality": 50,
    "contribution": 0
  },
  "EGLL": {
    "distance": 22564,
    "latitude": 51.48,
    "longitude": -0.45,
    "useCount": 0,
    "id": "EGLL",
    "name": "EGLL",
    "quality": 50,
    "contribution": 0
  },
  "D5621": {
    "distance": 11192,
    "latitude": 51.535,
    "longitude": 0.028,
    "useCount": 0,
    "id": "D5621",
    "name": "DW5621 Upton Park UK",
    "quality": 0,
    "contribution": 0
  },
  "F6665": {
    "distance": 14583,
    "latitude": 51.437,
    "longitude": 0.051,
    "useCount": 0,
    "id": "F6665",
    "name": "FW6665 Mottingham UK",
    "quality": 0,
    "contribution": 0
  }
} 
*/

  WeatherModelStationsEGWU? EGWU;
  WeatherModelStationsEGLC? EGLC;
  WeatherModelStationsEGLL? EGLL;
  WeatherModelStationsD5621? D5621;
  WeatherModelStationsF6665? F6665;

  WeatherModelStations({
    this.EGWU,
    this.EGLC,
    this.EGLL,
    this.D5621,
    this.F6665,
  });
  WeatherModelStations.fromJson(Map<String, dynamic> json) {
    EGWU = (json['EGWU'] != null) ? WeatherModelStationsEGWU.fromJson(json['EGWU']) : null;
    EGLC = (json['EGLC'] != null) ? WeatherModelStationsEGLC.fromJson(json['EGLC']) : null;
    EGLL = (json['EGLL'] != null) ? WeatherModelStationsEGLL.fromJson(json['EGLL']) : null;
    D5621 = (json['D5621'] != null) ? WeatherModelStationsD5621.fromJson(json['D5621']) : null;
    F6665 = (json['F6665'] != null) ? WeatherModelStationsF6665.fromJson(json['F6665']) : null;
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (EGWU != null) {
      data['EGWU'] = EGWU!.toJson();
    }
    if (EGLC != null) {
      data['EGLC'] = EGLC!.toJson();
    }
    if (EGLL != null) {
      data['EGLL'] = EGLL!.toJson();
    }
    if (D5621 != null) {
      data['D5621'] = D5621!.toJson();
    }
    if (F6665 != null) {
      data['F6665'] = F6665!.toJson();
    }
    return data;
  }
}

class WeatherModelDaysHours {
/*
{
  "datetime": "00:00:00",
  "datetimeEpoch": 1691708400,
  "temp": 66.8,
  "feelslike": 66.8,
  "humidity": 75.71,
  "dew": 58.9,
  "precip": 0,
  "precipprob": 0,
  "snow": 0,
  "snowdepth": 0,
  "preciptype": null,
  "windgust": 11.6,
  "windspeed": 6.5,
  "winddir": 210,
  "pressure": 1018.2,
  "visibility": 6.2,
  "cloudcover": 25,
  "solarradiation": 0,
  "solarenergy": 0,
  "uvindex": 0,
  "severerisk": 10,
  "conditions": "Partially cloudy",
  "icon": "partly-cloudy-night",
  "stations": [
    "EGWU"
  ],
  "source": "obs"
} 
*/

  String? datetime;
  int? datetimeEpoch;
  double? temp;
  double? feelslike;
  double? humidity;
  double? dew;
  int? precip;
  int? precipprob;
  int? snow;
  int? snowdepth;
  String? preciptype;
  double? windgust;
  double? windspeed;
  int? winddir;
  double? pressure;
  double? visibility;
  int? cloudcover;
  int? solarradiation;
  int? solarenergy;
  int? uvindex;
  int? severerisk;
  String? conditions;
  String? icon;
  List<String?>? stations;
  String? source;

  WeatherModelDaysHours({
    this.datetime,
    this.datetimeEpoch,
    this.temp,
    this.feelslike,
    this.humidity,
    this.dew,
    this.precip,
    this.precipprob,
    this.snow,
    this.snowdepth,
    this.preciptype,
    this.windgust,
    this.windspeed,
    this.winddir,
    this.pressure,
    this.visibility,
    this.cloudcover,
    this.solarradiation,
    this.solarenergy,
    this.uvindex,
    this.severerisk,
    this.conditions,
    this.icon,
    this.stations,
    this.source,
  });
  WeatherModelDaysHours.fromJson(Map<String, dynamic> json) {
    datetime = json['datetime']?.toString();
    datetimeEpoch = json['datetimeEpoch']?.toInt();
    temp = json['temp']?.toDouble();
    feelslike = json['feelslike']?.toDouble();
    humidity = json['humidity']?.toDouble();
    dew = json['dew']?.toDouble();
    precip = json['precip']?.toInt();
    precipprob = json['precipprob']?.toInt();
    snow = json['snow']?.toInt();
    snowdepth = json['snowdepth']?.toInt();
    preciptype = json['preciptype']?.toString();
    windgust = json['windgust']?.toDouble();
    windspeed = json['windspeed']?.toDouble();
    winddir = json['winddir']?.toInt();
    pressure = json['pressure']?.toDouble();
    visibility = json['visibility']?.toDouble();
    cloudcover = json['cloudcover']?.toInt();
    solarradiation = json['solarradiation']?.toInt();
    solarenergy = json['solarenergy']?.toInt();
    uvindex = json['uvindex']?.toInt();
    severerisk = json['severerisk']?.toInt();
    conditions = json['conditions']?.toString();
    icon = json['icon']?.toString();
  if (json['stations'] != null) {
  final v = json['stations'];
  final arr0 = <String>[];
  v.forEach((v) {
  arr0.add(v.toString());
  });
    stations = arr0;
    }
    source = json['source']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['datetime'] = datetime;
    data['datetimeEpoch'] = datetimeEpoch;
    data['temp'] = temp;
    data['feelslike'] = feelslike;
    data['humidity'] = humidity;
    data['dew'] = dew;
    data['precip'] = precip;
    data['precipprob'] = precipprob;
    data['snow'] = snow;
    data['snowdepth'] = snowdepth;
    data['preciptype'] = preciptype;
    data['windgust'] = windgust;
    data['windspeed'] = windspeed;
    data['winddir'] = winddir;
    data['pressure'] = pressure;
    data['visibility'] = visibility;
    data['cloudcover'] = cloudcover;
    data['solarradiation'] = solarradiation;
    data['solarenergy'] = solarenergy;
    data['uvindex'] = uvindex;
    data['severerisk'] = severerisk;
    data['conditions'] = conditions;
    data['icon'] = icon;
    if (stations != null) {
      final v = stations;
      final arr0 = [];
  v!.forEach((v) {
  arr0.add(v);
  });
      data['stations'] = arr0;
    }
    data['source'] = source;
    return data;
  }
}

class WeatherModelDays {
/*
{
  "datetime": "2023-08-11",
  "datetimeEpoch": 1691708400,
  "tempmax": 76.2,
  "tempmin": 65,
  "temp": 69.7,
  "feelslikemax": 76.2,
  "feelslikemin": 65,
  "feelslike": 69.7,
  "dew": 60,
  "humidity": 71.8,
  "precip": 0,
  "precipprob": 0,
  "precipcover": 0,
  "preciptype": [
    "rain"
  ],
  "snow": 0,
  "snowdepth": 0,
  "windgust": 29.5,
  "windspeed": 13.7,
  "winddir": 223.9,
  "pressure": 1017.3,
  "cloudcover": 78.8,
  "visibility": 6.2,
  "solarradiation": 128.9,
  "solarenergy": 11.1,
  "uvindex": 9,
  "severerisk": 10,
  "sunrise": "05:39:07",
  "sunriseEpoch": 1691728747,
  "sunset": "20:31:27",
  "sunsetEpoch": 1691782287,
  "moonphase": 0.83,
  "conditions": "Partially cloudy",
  "description": "Partly cloudy throughout the day.",
  "icon": "partly-cloudy-day",
  "stations": [
    "EGWU"
  ],
  "source": "obs",
  "hours": [
    {
      "datetime": "00:00:00",
      "datetimeEpoch": 1691708400,
      "temp": 66.8,
      "feelslike": 66.8,
      "humidity": 75.71,
      "dew": 58.9,
      "precip": 0,
      "precipprob": 0,
      "snow": 0,
      "snowdepth": 0,
      "preciptype": null,
      "windgust": 11.6,
      "windspeed": 6.5,
      "winddir": 210,
      "pressure": 1018.2,
      "visibility": 6.2,
      "cloudcover": 25,
      "solarradiation": 0,
      "solarenergy": 0,
      "uvindex": 0,
      "severerisk": 10,
      "conditions": "Partially cloudy",
      "icon": "partly-cloudy-night",
      "stations": [
        "EGWU"
      ],
      "source": "obs"
    }
  ]
} 
*/

  String? datetime;
  int? datetimeEpoch;
  double? tempmax;
  int? tempmin;
  double? temp;
  double? feelslikemax;
  int? feelslikemin;
  double? feelslike;
  int? dew;
  double? humidity;
  int? precip;
  int? precipprob;
  int? precipcover;
  List<String?>? preciptype;
  int? snow;
  int? snowdepth;
  double? windgust;
  double? windspeed;
  double? winddir;
  double? pressure;
  double? cloudcover;
  double? visibility;
  double? solarradiation;
  double? solarenergy;
  int? uvindex;
  int? severerisk;
  String? sunrise;
  int? sunriseEpoch;
  String? sunset;
  int? sunsetEpoch;
  double? moonphase;
  String? conditions;
  String? description;
  String? icon;
  List<String?>? stations;
  String? source;
  List<WeatherModelDaysHours?>? hours;

  WeatherModelDays({
    this.datetime,
    this.datetimeEpoch,
    this.tempmax,
    this.tempmin,
    this.temp,
    this.feelslikemax,
    this.feelslikemin,
    this.feelslike,
    this.dew,
    this.humidity,
    this.precip,
    this.precipprob,
    this.precipcover,
    this.preciptype,
    this.snow,
    this.snowdepth,
    this.windgust,
    this.windspeed,
    this.winddir,
    this.pressure,
    this.cloudcover,
    this.visibility,
    this.solarradiation,
    this.solarenergy,
    this.uvindex,
    this.severerisk,
    this.sunrise,
    this.sunriseEpoch,
    this.sunset,
    this.sunsetEpoch,
    this.moonphase,
    this.conditions,
    this.description,
    this.icon,
    this.stations,
    this.source,
    this.hours,
  });
  WeatherModelDays.fromJson(Map<String, dynamic> json) {
    datetime = json['datetime']?.toString();
    datetimeEpoch = json['datetimeEpoch']?.toInt();
    tempmax = json['tempmax']?.toDouble();
    tempmin = json['tempmin']?.toInt();
    temp = json['temp']?.toDouble();
    feelslikemax = json['feelslikemax']?.toDouble();
    feelslikemin = json['feelslikemin']?.toInt();
    feelslike = json['feelslike']?.toDouble();
    dew = json['dew']?.toInt();
    humidity = json['humidity']?.toDouble();
    precip = json['precip']?.toInt();
    precipprob = json['precipprob']?.toInt();
    precipcover = json['precipcover']?.toInt();
  if (json['preciptype'] != null) {
  final v = json['preciptype'];
  final arr0 = <String>[];
  v.forEach((v) {
  arr0.add(v.toString());
  });
    preciptype = arr0;
    }
    snow = json['snow']?.toInt();
    snowdepth = json['snowdepth']?.toInt();
    windgust = json['windgust']?.toDouble();
    windspeed = json['windspeed']?.toDouble();
    winddir = json['winddir']?.toDouble();
    pressure = json['pressure']?.toDouble();
    cloudcover = json['cloudcover']?.toDouble();
    visibility = json['visibility']?.toDouble();
    solarradiation = json['solarradiation']?.toDouble();
    solarenergy = json['solarenergy']?.toDouble();
    uvindex = json['uvindex']?.toInt();
    severerisk = json['severerisk']?.toInt();
    sunrise = json['sunrise']?.toString();
    sunriseEpoch = json['sunriseEpoch']?.toInt();
    sunset = json['sunset']?.toString();
    sunsetEpoch = json['sunsetEpoch']?.toInt();
    moonphase = json['moonphase']?.toDouble();
    conditions = json['conditions']?.toString();
    description = json['description']?.toString();
    icon = json['icon']?.toString();
  if (json['stations'] != null) {
  final v = json['stations'];
  final arr0 = <String>[];
  v.forEach((v) {
  arr0.add(v.toString());
  });
    stations = arr0;
    }
    source = json['source']?.toString();
  if (json['hours'] != null) {
  final v = json['hours'];
  final arr0 = <WeatherModelDaysHours>[];
  v.forEach((v) {
  arr0.add(WeatherModelDaysHours.fromJson(v));
  });
    hours = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['datetime'] = datetime;
    data['datetimeEpoch'] = datetimeEpoch;
    data['tempmax'] = tempmax;
    data['tempmin'] = tempmin;
    data['temp'] = temp;
    data['feelslikemax'] = feelslikemax;
    data['feelslikemin'] = feelslikemin;
    data['feelslike'] = feelslike;
    data['dew'] = dew;
    data['humidity'] = humidity;
    data['precip'] = precip;
    data['precipprob'] = precipprob;
    data['precipcover'] = precipcover;
    if (preciptype != null) {
      final v = preciptype;
      final arr0 = [];
  v!.forEach((v) {
  arr0.add(v);
  });
      data['preciptype'] = arr0;
    }
    data['snow'] = snow;
    data['snowdepth'] = snowdepth;
    data['windgust'] = windgust;
    data['windspeed'] = windspeed;
    data['winddir'] = winddir;
    data['pressure'] = pressure;
    data['cloudcover'] = cloudcover;
    data['visibility'] = visibility;
    data['solarradiation'] = solarradiation;
    data['solarenergy'] = solarenergy;
    data['uvindex'] = uvindex;
    data['severerisk'] = severerisk;
    data['sunrise'] = sunrise;
    data['sunriseEpoch'] = sunriseEpoch;
    data['sunset'] = sunset;
    data['sunsetEpoch'] = sunsetEpoch;
    data['moonphase'] = moonphase;
    data['conditions'] = conditions;
    data['description'] = description;
    data['icon'] = icon;
    if (stations != null) {
      final v = stations;
      final arr0 = [];
  v!.forEach((v) {
  arr0.add(v);
  });
      data['stations'] = arr0;
    }
    data['source'] = source;
    if (hours != null) {
      final v = hours;
      final arr0 = [];
  v!.forEach((v) {
  arr0.add(v!.toJson());
  });
      data['hours'] = arr0;
    }
    return data;
  }
}

class WeatherModel {
/*
{
  "queryCost": 1,
  "latitude": 51.5064,
  "longitude": -0.12721,
  "resolvedAddress": "London, England, United Kingdom",
  "address": "London,UK",
  "timezone": "Europe/London",
  "tzoffset": 1,
  "description": "Warming up with no rain expected.",
  "days": [
    {
      "datetime": "2023-08-11",
      "datetimeEpoch": 1691708400,
      "tempmax": 76.2,
      "tempmin": 65,
      "temp": 69.7,
      "feelslikemax": 76.2,
      "feelslikemin": 65,
      "feelslike": 69.7,
      "dew": 60,
      "humidity": 71.8,
      "precip": 0,
      "precipprob": 0,
      "precipcover": 0,
      "preciptype": [
        "rain"
      ],
      "snow": 0,
      "snowdepth": 0,
      "windgust": 29.5,
      "windspeed": 13.7,
      "winddir": 223.9,
      "pressure": 1017.3,
      "cloudcover": 78.8,
      "visibility": 6.2,
      "solarradiation": 128.9,
      "solarenergy": 11.1,
      "uvindex": 9,
      "severerisk": 10,
      "sunrise": "05:39:07",
      "sunriseEpoch": 1691728747,
      "sunset": "20:31:27",
      "sunsetEpoch": 1691782287,
      "moonphase": 0.83,
      "conditions": "Partially cloudy",
      "description": "Partly cloudy throughout the day.",
      "icon": "partly-cloudy-day",
      "stations": [
        "EGWU"
      ],
      "source": "obs",
      "hours": [
        {
          "datetime": "00:00:00",
          "datetimeEpoch": 1691708400,
          "temp": 66.8,
          "feelslike": 66.8,
          "humidity": 75.71,
          "dew": 58.9,
          "precip": 0,
          "precipprob": 0,
          "snow": 0,
          "snowdepth": 0,
          "preciptype": null,
          "windgust": 11.6,
          "windspeed": 6.5,
          "winddir": 210,
          "pressure": 1018.2,
          "visibility": 6.2,
          "cloudcover": 25,
          "solarradiation": 0,
          "solarenergy": 0,
          "uvindex": 0,
          "severerisk": 10,
          "conditions": "Partially cloudy",
          "icon": "partly-cloudy-night",
          "stations": [
            "EGWU"
          ],
          "source": "obs"
        }
      ]
    }
  ],
  "alerts": [
    ""
  ],
  "stations": {
    "EGWU": {
      "distance": 20850,
      "latitude": 51.55,
      "longitude": -0.42,
      "useCount": 0,
      "id": "EGWU",
      "name": "EGWU",
      "quality": 50,
      "contribution": 0
    },
    "EGLC": {
      "distance": 12300,
      "latitude": 51.5,
      "longitude": 0.05,
      "useCount": 0,
      "id": "EGLC",
      "name": "EGLC",
      "quality": 50,
      "contribution": 0
    },
    "EGLL": {
      "distance": 22564,
      "latitude": 51.48,
      "longitude": -0.45,
      "useCount": 0,
      "id": "EGLL",
      "name": "EGLL",
      "quality": 50,
      "contribution": 0
    },
    "D5621": {
      "distance": 11192,
      "latitude": 51.535,
      "longitude": 0.028,
      "useCount": 0,
      "id": "D5621",
      "name": "DW5621 Upton Park UK",
      "quality": 0,
      "contribution": 0
    },
    "F6665": {
      "distance": 14583,
      "latitude": 51.437,
      "longitude": 0.051,
      "useCount": 0,
      "id": "F6665",
      "name": "FW6665 Mottingham UK",
      "quality": 0,
      "contribution": 0
    }
  },
  "currentConditions": {
    "datetime": "23:20:00",
    "datetimeEpoch": 1691792400,
    "temp": 65.8,
    "feelslike": 65.8,
    "humidity": 75.7,
    "dew": 57.9,
    "precip": 0,
    "precipprob": 0,
    "snow": 0,
    "snowdepth": 0,
    "preciptype": null,
    "windgust": 0.9,
    "windspeed": 2,
    "winddir": 167,
    "pressure": 1017,
    "visibility": 6.2,
    "cloudcover": 87,
    "solarradiation": 0,
    "solarenergy": 0,
    "uvindex": 0,
    "conditions": "Partially cloudy",
    "icon": "partly-cloudy-night",
    "stations": [
      "D5621"
    ],
    "source": "obs",
    "sunrise": "05:39:07",
    "sunriseEpoch": 1691728747,
    "sunset": "20:31:27",
    "sunsetEpoch": 1691782287,
    "moonphase": 0.83
  }
} 
*/

  int? queryCost;
  double? latitude;
  double? longitude;
  String? resolvedAddress;
  String? address;
  String? timezone;
  int? tzoffset;
  String? description;
  List<WeatherModelDays?>? days;
  List<String?>? alerts;
  WeatherModelStations? stations;
  WeatherModelCurrentConditions? currentConditions;

  WeatherModel({
    this.queryCost,
    this.latitude,
    this.longitude,
    this.resolvedAddress,
    this.address,
    this.timezone,
    this.tzoffset,
    this.description,
    this.days,
    this.alerts,
    this.stations,
    this.currentConditions,
  });
  WeatherModel.fromJson(Map<String, dynamic> json) {
    queryCost = json['queryCost']?.toInt();
    latitude = json['latitude']?.toDouble();
    longitude = json['longitude']?.toDouble();
    resolvedAddress = json['resolvedAddress']?.toString();
    address = json['address']?.toString();
    timezone = json['timezone']?.toString();
    tzoffset = json['tzoffset']?.toInt();
    description = json['description']?.toString();
  if (json['days'] != null) {
  final v = json['days'];
  final arr0 = <WeatherModelDays>[];
  v.forEach((v) {
  arr0.add(WeatherModelDays.fromJson(v));
  });
    days = arr0;
    }
  if (json['alerts'] != null) {
  final v = json['alerts'];
  final arr0 = <String>[];
  v.forEach((v) {
  arr0.add(v.toString());
  });
    alerts = arr0;
    }
    stations = (json['stations'] != null) ? WeatherModelStations.fromJson(json['stations']) : null;
    currentConditions = (json['currentConditions'] != null) ? WeatherModelCurrentConditions.fromJson(json['currentConditions']) : null;
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['queryCost'] = queryCost;
    data['latitude'] = latitude;
    data['longitude'] = longitude;
    data['resolvedAddress'] = resolvedAddress;
    data['address'] = address;
    data['timezone'] = timezone;
    data['tzoffset'] = tzoffset;
    data['description'] = description;
    if (days != null) {
      final v = days;
      final arr0 = [];
  v!.forEach((v) {
  arr0.add(v!.toJson());
  });
      data['days'] = arr0;
    }
    if (alerts != null) {
      final v = alerts;
      final arr0 = [];
  v!.forEach((v) {
  arr0.add(v);
  });
      data['alerts'] = arr0;
    }
    if (stations != null) {
      data['stations'] = stations!.toJson();
    }
    if (currentConditions != null) {
      data['currentConditions'] = currentConditions!.toJson();
    }
    return data;
  }
}
